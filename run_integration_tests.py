#!/usr/bin/env python3
"""
Script para executar testes de integra√ß√£o com a Evolution API real.

Este script:
1. Carrega configura√ß√µes do arquivo .env.integration
2. Verifica se a Evolution API est√° acess√≠vel
3. Executa os testes de integra√ß√£o
4. Fornece relat√≥rio dos resultados

USO:
    python run_integration_tests.py [--setup] [--all] [--quick]

OP√á√ïES:
    --setup     : Mostra instru√ß√µes de configura√ß√£o e sai
    --all       : Executa todos os testes (incluindo os que requerem QR)
    --quick     : Executa apenas testes r√°pidos (pula testes marcados como 'slow')
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path

import requests
from dotenv import load_dotenv


def load_integration_env():
    """Carrega vari√°veis de ambiente para testes de integra√ß√£o."""
    integration_env = Path(".env.integration")

    if not integration_env.exists():
        print("‚ùå Arquivo .env.integration n√£o encontrado!")
        print("\nüìã Configure os testes de integra√ß√£o:")
        print("1. Copie .env.integration.example para .env.integration")
        print("2. Configure suas credenciais reais da Evolution API")
        print("3. Execute novamente este script")
        return False

    load_dotenv(integration_env)
    return True


def check_evolution_api():
    """Verifica se a Evolution API est√° acess√≠vel."""
    base_url = os.getenv("EVOLUTION_BASE_URL", "http://localhost:8080")
    api_key = os.getenv("EVOLUTION_API_KEY")

    if not api_key:
        print("‚ùå EVOLUTION_API_KEY n√£o configurado no .env.integration")
        return False

    try:
        # Tenta fazer um health check b√°sico
        health_url = f"{base_url.rstrip('/')}/health"
        response = requests.get(health_url, timeout=10)

        if response.status_code == 200:
            print(f"‚úÖ Evolution API acess√≠vel: {base_url}")
            return True
        else:
            print(f"‚ö†Ô∏è Evolution API respondeu com status {response.status_code}")
            print("Continuando mesmo assim...")
            return True

    except requests.exceptions.RequestException as e:
        print(f"‚ùå N√£o foi poss√≠vel conectar na Evolution API: {e}")
        print(f"URL testada: {base_url}")
        print("\nüîß Verifique:")
        print("- Evolution API est√° rodando?")
        print("- URL est√° correta no .env.integration?")
        print("- Firewall/proxy n√£o est√° bloqueando?")
        return False


def show_setup_instructions():
    """Mostra instru√ß√µes detalhadas de configura√ß√£o."""
    print(
        """
üöÄ CONFIGURA√á√ÉO DOS TESTES DE INTEGRA√á√ÉO
========================================

1Ô∏è‚É£ CONFIGURE A EVOLUTION API:
   - Certifique-se que est√° rodando (normalmente em http://localhost:8080)
   - Acesse o manager web para obter sua API key
   - Anote a URL base e a API key

2Ô∏è‚É£ CONFIGURE O ARQUIVO DE AMBIENTE:
   cp .env.integration.example .env.integration

   Edite .env.integration e configure:
   - EVOLUTION_BASE_URL=http://localhost:8080
   - EVOLUTION_API_KEY=sua-chave-aqui

3Ô∏è‚É£ EXECUTE OS TESTES:
   python run_integration_tests.py

üìã TIPOS DE TESTE DISPON√çVEIS:
   --quick     : Testes r√°pidos (recomendado para desenvolvimento)
   --all       : Todos os testes (inclui testes que requerem QR)
   (padr√£o)    : Testes de integra√ß√£o normais

üîç COMANDOS PYTEST DIRETOS:
   pytest tests/integration/ -v -m integration
   pytest tests/integration/ -v -m "integration and not slow"
   pytest tests/integration/ -v -m requires_qr

‚ö†Ô∏è IMPORTANTE:
   - Estes testes criam inst√¢ncias REAIS na Evolution API
   - Use apenas para desenvolvimento/teste
   - Inst√¢ncias de teste s√£o limpas automaticamente
   - N√ÉO execute em produ√ß√£o
"""
    )


def run_tests(test_type="normal"):
    """Executa os testes de integra√ß√£o."""
    base_cmd = ["python", "-m", "pytest", "tests/integration/", "-v"]

    if test_type == "quick":
        # Executa testes r√°pidos apenas
        base_cmd.extend(["-m", "integration and not slow"])
        print("üèÉ Executando testes r√°pidos de integra√ß√£o...")

    elif test_type == "all":
        # Executa todos os testes
        base_cmd.extend(["-m", "integration"])
        print("üîÑ Executando TODOS os testes de integra√ß√£o (incluindo QR)...")
        print("‚ö†Ô∏è  Alguns testes podem requerer escaneamento manual de QR code!")

    else:
        # Executa testes normais (sem QR, com alguns slow)
        base_cmd.extend(["-m", "integration and not requires_qr"])
        print("üß™ Executando testes de integra√ß√£o padr√£o...")

    print(f"Comando: {' '.join(base_cmd)}")
    print("-" * 50)

    try:
        result = subprocess.run(base_cmd, check=False)
        return result.returncode == 0
    except KeyboardInterrupt:
        print("\n‚ö° Testes interrompidos pelo usu√°rio")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar testes: {e}")
        return False


def main():
    """Fun√ß√£o principal."""
    parser = argparse.ArgumentParser(
        description="Executa testes de integra√ß√£o com Evolution API real"
    )
    parser.add_argument(
        "--setup", action="store_true", help="Mostra instru√ß√µes de configura√ß√£o e sai"
    )
    parser.add_argument(
        "--all", action="store_true", help="Executa todos os testes (incluindo os que requerem QR)"
    )
    parser.add_argument("--quick", action="store_true", help="Executa apenas testes r√°pidos")

    args = parser.parse_args()

    if args.setup:
        show_setup_instructions()
        return 0

    print("üß™ TESTES DE INTEGRA√á√ÉO - PYEVOLUTION API")
    print("=" * 50)

    # 1. Carrega configura√ß√£o
    print("üìÅ Carregando configura√ß√£o...")
    if not load_integration_env():
        return 1

    # 2. Verifica API
    print("üîç Verificando Evolution API...")
    if not check_evolution_api():
        print("\nüí° Use --setup para ver instru√ß√µes de configura√ß√£o")
        return 1

    # 3. Executa testes
    test_type = "all" if args.all else "quick" if args.quick else "normal"
    success = run_tests(test_type)

    if success:
        print("\nüéâ Testes de integra√ß√£o conclu√≠dos com sucesso!")
        print("‚úÖ As corre√ß√µes de valida√ß√£o Pydantic est√£o funcionando!")
    else:
        print("\nüí• Alguns testes falharam")
        print("üîç Verifique os logs acima para detalhes")

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
